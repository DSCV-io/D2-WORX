// Grafana Alloy Configuration for DÂ²-WORX
// Handles metrics scraping, log collection, and trace forwarding

logging {
  level  = "info"
  format = "json"
}

livedebugging {
  enabled = true
}

/******************************************************************************
 * METRICS COLLECTION
 ******************************************************************************/

prometheus.scrape "infrastructure" {
  targets = [
    // Docker monitoring (container)
    {
      __address__ = "d2-cadvisor:8080",
      job         = "cadvisor",
      service     = "cadvisor",
    },

    // Application services (running on host via Aspire)
    {
      __address__ = "host.docker.internal:5461",
      job         = "gateway-rest",
      service     = "REST",
      __metrics_path__ = "/metrics",
    },
    {
      __address__ = "host.docker.internal:5132",
      job         = "service-auth",
      service     = "Auth.API",
      __metrics_path__ = "/metrics",
    },

    // Infrastructure exporters (containers)
    {
      __address__ = "d2-postgres-exporter:9187",
      job         = "postgresql-exporter",
      service     = "postgresql",
    },
    {
      __address__ = "d2-redis-exporter:9121",
      job         = "redis-exporter",
      service     = "redis",
    },
    {
      __address__ = "d2-rabbitmq:15692",
      job         = "rabbitmq",
      service     = "rabbitmq",
    },
    {
      __address__      = "d2-keycloak:9000",
      job              = "keycloak",
      service          = "keycloak",
      __metrics_path__ = "/metrics",
    },

    // LGTM stack (containers)
    {
      __address__ = "d2-mimir:9009",
      job         = "mimir",
      service     = "mimir",
    },
    {
      __address__ = "d2-loki:3100",
      job         = "loki",
      service     = "loki",
    },
    {
      __address__ = "d2-tempo:3200",
      job         = "tempo",
      service     = "tempo",
    },
  ]

  forward_to = [prometheus.relabel.drop_excessive_labels.receiver]
}

prometheus.relabel "drop_excessive_labels" {
  forward_to = [prometheus.remote_write.mimir.receiver]

  // Drop excessive container metadata labels (only affects labels, not metrics)
  rule {
    regex  = "container_label_(architecture|build_date|cpe|vendor|version|com_microsoft_.*|com_docker_.*|desktop_docker_.*|org_opencontainers_.*)"
    action = "labeldrop"
  }
}

prometheus.remote_write "mimir" {
  endpoint {
    url = "http://d2-mimir:9009/api/v1/push"
  }

  external_labels = {
    cluster     = "d2-local-dev",
    environment = "Development",
  }
}

// Read the full YAML config
local.file "minio_config" {
  filename = "/minio-token/prometheus-config.yaml"
}

// Extract just the bearer token using string manipulation
prometheus.scrape "minio" {
  targets = [
    {
      __address__ = "d2-minio:9000",
      job         = "minio",
      service     = "minio",
    },
  ]

  // Split on "bearer_token: ", take second part, then take first line
  bearer_token = split(split(local.file.minio_config.content, "bearer_token: ")[1], "\n")[0]

  metrics_path = "/minio/v2/metrics/cluster"

  forward_to = [prometheus.relabel.drop_excessive_labels.receiver]
}

/******************************************************************************
 * LOG COLLECTION
 ******************************************************************************/

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "containers" {
  targets = discovery.docker.containers.targets

  // Extract container name
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/(.*)"
    target_label  = "container"
  }

  // Extract service name from d2-xxx pattern
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/d2-(.*)"
    target_label  = "service"
  }

  // Add log stream type
  rule {
    source_labels = ["__meta_docker_container_log_stream"]
    target_label  = "stream"
  }

  // Set log file path
  rule {
    source_labels = ["__meta_docker_container_id"]
    target_label  = "__path__"
    replacement   = "/var/lib/docker/containers/$1/$1-json.log"
  }
}

loki.source.docker "containers" {
  host          = "unix:///var/run/docker.sock"
  targets       = discovery.relabel.containers.output
  forward_to    = [loki.write.local.receiver]
  relabel_rules = discovery.relabel.containers.rules
}

loki.write "local" {
  endpoint {
    url = "http://d2-loki:3100/loki/api/v1/push"
  }

  external_labels = {
    cluster     = "d2-local-dev",
    environment = "Development",
  }
}

/******************************************************************************
 * TRACE COLLECTION
 ******************************************************************************/

otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    metrics = [otelcol.exporter.prometheus.default.input]
    logs    = [otelcol.exporter.loki.default.input]
    traces  = [otelcol.exporter.otlp.tempo.input]
  }
}

otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.mimir.receiver]
}

otelcol.exporter.loki "default" {
  forward_to = [loki.write.local.receiver]
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "d2-tempo:4317"
    tls {
      insecure = true
    }
  }
}
